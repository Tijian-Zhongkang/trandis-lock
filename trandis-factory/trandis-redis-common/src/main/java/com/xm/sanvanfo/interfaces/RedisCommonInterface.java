package com.xm.sanvanfo.interfaces;

import com.xm.sanvanfo.constant.RedisConstant;
import com.xm.sanvanfo.trandiscore.TransactionFuncInterceptor;
import com.xm.sanvanfo.trandiscore.transaction.redis.RedisBranchTransactionConfiguration;
import org.apache.commons.lang3.StringUtils;

public interface RedisCommonInterface<K, V> {

    //using {key} to ensure the same slot
    default K getUndoLogKey(Serializer<K,V> serializer, TransactionFuncInterceptor interceptor, RedisBranchTransactionConfiguration configuration) {
        return serializer.toKey( interceptor.getXid() + "-" + configuration.getApplicationId()
                + "-" + interceptor.getBranchTransaction().getName() + "-undolog-" + configuration.getTransactionSuffix());
    }

    default K getUndoLogKey(Serializer<K, V> serializer, String xid, String name, RedisBranchTransactionConfiguration configuration) {
        return serializer.toKey(xid + "-" + configuration.getApplicationId() +
                "-" + name + "-undolog-" + configuration.getTransactionSuffix());
    }

    default K getSnapShotKey(Serializer<K,V> serializer, String xid, K k, RedisBranchTransactionConfiguration configuration) {
        return serializer.toKey( xid + "-" + getKey(serializer.toKeyString(k))+ "-" + configuration.getSnapshotSuffix());
    }

    /*Hash use another snapshot key. Because hash is not a complete snapshot, it is only a snapshot of the field of the operation.
     * The purpose is that the field operation does not cause the whole key to be locked
     * If the same snapshot is used, it will affect the snapshot generated by del, TTL and other key operations*/
    default K getHashSnapshotKey(Serializer<K, V> serializer, String xid, K k, RedisBranchTransactionConfiguration configuration) {
        return serializer.toKey( xid + "-" + getKey(serializer.toKeyString(k))+ "-hash-" + configuration.getSnapshotSuffix());
    }

    default K getHashDeleteKey(Serializer<K, V> serializer, String xid, K k, RedisBranchTransactionConfiguration configuration) {
        return serializer.toKey( xid + "-" + getKey(serializer.toKeyString(k))+ "-hash-delete-" + configuration.getSnapshotSuffix());
    }

    default K getBackupKey(Serializer<K,V> serializer, String xid, K k, RedisBranchTransactionConfiguration configuration) {
        return serializer.toKey(xid + "-" + configuration.getApplicationId() + "-" + getKey(serializer.toKeyString(k)) + "-" + configuration.getBackupSuffix());
    }

    default K getHashBackupKey(Serializer<K, V> serializer, String xid, K k, K field, RedisBranchTransactionConfiguration configuration) {
        return serializer.toKey(xid + "-" + configuration.getApplicationId() + "-" + getKey(serializer.toKeyString(k)) + "-" + serializer.toKeyString(field)
               + "-" + configuration.getBackupSuffix());
    }

    default K getVersionKey(String xid,  Serializer<K,V> serializer, K k, RedisBranchTransactionConfiguration configuration) {
        return serializer.toKey(xid + "-" + getSpaceName(configuration) + "-" + getKey(serializer.toKeyString(k)) + "--version-" + configuration.getTransactionSuffix());
    }

    default K getVersionKey(String xid, Serializer<K,V> serializer, K k, Object subKey, RedisBranchTransactionConfiguration configuration) {
        if(null == subKey) {
            return getVersionKey(xid, serializer, k, configuration);
        }
        return serializer.toKey( xid + "-" + getSpaceName(configuration) + "-" + getKey(serializer.toKeyString(k)) + "-" + subKey + "-version-" + configuration.getTransactionSuffix());
    }


    default String getKey(String key) {
        Integer pos;
        if(key.contains("\\\\{")) {
            key = key.replaceAll("\\\\\\{", "%7B");
        }
        if(key.contains("\\\\}")) {
            key = key.replaceAll("\\\\}", "%7D");
        }
        if((pos = key.indexOf("{")) != -1) {
            Integer endPos = key.indexOf("}");
            if(endPos != -1 && endPos - pos > 1) {
                return key;
            }
        }
        return "{" + key + "}";
    }

    default String getSpaceName(RedisBranchTransactionConfiguration configuration) {
        if(StringUtils.isNotEmpty(configuration.getSpaceName())) {
            return configuration.getSpaceName();
        }
        return RedisConstant.SPACE;
    }
}
